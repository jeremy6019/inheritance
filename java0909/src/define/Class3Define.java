package define;

public class Class3Define {
    /*
    ** 접근자메소드(getter & setter )
    
     -  객체 지향 프로그래밍에서는 클래스 안에 만들어진 속성들을 클래스나 객체를 이용해서 직접 접근하지 말고 
         메소드를 통해서 접근하는 것을 권장 
     -  속성들은 'private'으로 생성하고 접근자 메소드를 'public' 으로 생성해서 접근자 메소드를 이용해서 속성들을 
        접근하도록 권장  
        
	     1. getter 
	     - 속성의 값을 가져오는 메소드  
	     - 생성할 때 return type은 속성의 type과 동일 
	     - 이름은 get 속성이름으로 만드는데 속성이름의 첫글자는 대문자 사용   
	       속성의 자료형이 boolean인 경우  get 대신에 'is' 사용 
	     - 매개변수는 없습니다. 
	     - 메소드의 내용은 속성의 값을 return하기만 합니다. 
		 
		2. setter 
		 - 속성의 값을 설정하는 메소드
		 - return type 은 void 
		 - 이름은 set속성이름으로 만드는데 속성이름의 첫글자는 대문자 
		 - 매개변수가 속성의 자료형과 동일한 자료형으로 1개 생성 
		 - 내용은 매개변수의 값을 속성에 대입합니다. 
		 
		 3. 특이사항 
		 - eclipse 와 intelli J 에서는 메뉴에 만들어주는 기능이 존재합니다. 
		 직접생성하는 경우는 뭄 
		 - ' lombok'이라는 라이브러리를 이용하면 메뉴를 이용해서 생성할 필요도 없음 
		 - 이름을 기억하는 것이 중요합니다. 
		 - 만들어진 후 코드를 추가하는 경우가 있는데 getter같은 경우는 데이터를 언제 가져가서 누가 사용하는지 
		    로그(어떤 동작을 수행했는지)를 기록하느 코드를 작성하는 경우가 있습니다. 
		 - setter에는 특정 값의 범위내에서 변경이 이루어지고 있는지 확인하고 (유효성 검사) 
		    로그를 기록하는 코드를 작성하는 경우가 많습니다. 
		  
		  4.DTO (Data Transfer Object - Value Object) 
		   - 여러 개의 데이터를 묶어서 표현하기 위한 클래스 또는 객체 
		   - 테이블 구조에서 하나의 행을  표현하기 위해서 생성하는 클래스 
		   - java.util.Map으로 동일한  기능을 작성하기도 합니다. 
		 
		 ** 학생정보를 저장하는 클래스 
		 - 학번 - String schoolNum 
		 - 이름  - String Name 
		 - 성별  - boolean gender 
		 - 전화번호 - String mobile 
		
		 1. class생성 
		 
		 2. 생성을 private으로 생성 
		 
		 3. [source] - [Generater getter and setter]를 실행 
		     - 접근자 메소드가 자동으로 생성됩니다. 
		
		 ** 메소드 이름을 보고 확인 가능한 것 
		    - is로시작하면 return type은 boolean 
		   - get로 시작하면 무조건 return이 있습니다. 무조건 변수에 저장해야함 
		   - set으로 시작해면 매개변수가 있습니다. 
		   
		** Constructor (생성자) 
		- 클래스를 가지고 객체를 만들때 호출하는 메소드 
		- 클래스안에 만들지 않아도 매개변수가 없는 생성자가 자동으로 생성 
		- 이름은 무조건 클래스 이름으로 해야 합니다. 
		- 오버로딩(이름은 같고 매개변수의 개수나 자료형이 다른 것) 가능 
		- 직접 생성하면 기본적으로 제공되는 생성자가 없어집니다. 
		- 호출하는 방법은 new 생성자 이름(매개변수)의 형태  
		- 생성자는 호출하면 heap에 메모리 할당을 하고 그참조(주소)를 리턴 
		- 만드는 목적은 객체를 생성할 때 초기값을 기본값이 아닌 다른값으로 설정하거나 
		  매개변수로 데이터르 받아서 속성들을 초기화하기위해서 또는 객체를 생성할 때  
		  무엇인가 작업을 해야할 때 생성합니다. 
		- 매개변수가 없는 생성자를 default constructor라고 합니다. 
		  상속을 받을때 상위클래서에  default constructor가 없으면 생성자를 만들어서 
		  상위클래스의 생성자를 호출해 주어야 합니다. 
		- 에러나는 경우 
		   1. 상속을못받는 것을 억지로  2. 부모클래스에 default constructor가 없는 경우  3. 특이한 경우   
		   
		 ** 학번은 기본적으로 항상'1'로 설정 
		 - 인스턴스를 생성하고 setSchoolNum을 호출해서 1로 설정을 해야합니다.  
		 생성자를 호출해서 인스턴스를 만들고 setSchoolNum을 호출하는 구조입니다.
		 생성자에서 schoolNum 을 1로 만들 수 있다면 굳이 set SchoolNum을 
		 호출할 필요가 없어집니다. 
		 
		 ** static 속성과 instance속성 
		 - static속성: class 안에 static을 붙여서 만드는 속성 
		     class안에 하나만 만들어져서 모든instance가 공유합니다. 
		 - instance속성: class안에 static을 붙이지 않고 만드는 속성 
		    instance안에 만들어져서 각 instance가 별도로 사용하는 속성 
		  
		  ** this 
		  - this (매개변수) 는 생성자에서 다른 생성자를 호출할 때 사용하는 문법 
		  - 생성자 사이의 내용이 동일한 부분이 있다면 this()를 이용해서 호출하기도 합니다.
		     이 구문은 반드시 super()다음이 아니면 맨 처음에 나와야 합니다.
		    
		   ** 자바의 메모리 정리 
		    - 메모리 영역은 크게 3개 영역입니다. 
		       Stack은  메소드가 호출될 때 생성되서 메소드의 수행이 종료되면 자동으로 소멸  
		    
			    new라는 명령어를 이용해서 생성된 데이터가 저장되는 영역 - heap이라고도 하는 영역으로 
			    지울 수 있는 영역 
			    
			     literal(직접 입력한 데이터)과  class에 대한 코드가 저장되는 영역 - static(method,class)영역이라고도 
			     하는 영역으로 한 번 할당받으면 절대로 지워지거나 변경할 수 없는 영역  
			     
		     - heap영역을 관리하는 프로그램은 Garbage Collection입니다.
		     - 주기적으로 실행되어 참조하고 있는 데이터가 없으면 그메모리 영역을 사용가능한 영역으로 만들어 줍니다. 
		        참조를 없애고자 하는 경우에는 참조형 변수에 null을 할당하면 됩니다. 
		        StuInfo student1 = new StuInfo();  // 힙영역을 사용해 메모리 할당 
		        //메모리 정리하고자 할 때는 아래처럼 하면 됩니다. 오랫동안 사용하는 프로그램은 자주 메모리 정리해주어야 함  
		        student1 = null; 


		  #  참고 
		  C, C++
		  - 자료구조이론 - 실습(생성) 
		  - 못하는 것이 없음 
		  - 내가 만들면 됨 
		  
		  MS(Visual C++)
		  apple(Swift, object C)
		  - 적절한 선에서 제공(회사가 제공) 
		  - 회사가 업데이트 않해주면 못함 
		  
		  Java 
		  - Open Source (관리는 해주지 않음) 
		  - 프로젝트 단위로 제공 (검증이 다 되어있음)  
		  
		  Python , R
		  - 오픈소스인데 관리도 해줌 clan이 있음 
		  Linux, node js
		  - 올리는 단위가 라이브러리  
		   
		   
		   
		 
		 
		 
		 
		 
		 
		 
	   
	 
	 
	 
	*/
	
	
	
	
}
